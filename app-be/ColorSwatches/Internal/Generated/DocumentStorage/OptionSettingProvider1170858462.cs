// <auto-generated/>
#pragma warning disable
using ColorSwatches.Entities.Entities;
using Marten.Internal;
using Marten.Internal.Storage;
using Marten.Schema;
using Marten.Schema.Arguments;
using Npgsql;
using System;
using System.Collections.Generic;
using Weasel.Core;
using Weasel.Postgresql;

namespace Marten.Generated.DocumentStorage
{
    // START: UpsertOptionSettingOperation1170858462
    public class UpsertOptionSettingOperation1170858462 : Marten.Internal.Operations.StorageOperation<ColorSwatches.Entities.Entities.OptionSetting, System.Guid>
    {
        private readonly ColorSwatches.Entities.Entities.OptionSetting _document;
        private readonly System.Guid _id;
        private readonly System.Collections.Generic.Dictionary<System.Guid, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public UpsertOptionSettingOperation1170858462(ColorSwatches.Entities.Entities.OptionSetting document, System.Guid id, System.Collections.Generic.Dictionary<System.Guid, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }



        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            storeVersion();
        }


        public override System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            storeVersion();
            // Nothing
            return System.Threading.Tasks.Task.CompletedTask;
        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Upsert;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Uuid;
        }


        public override void ConfigureParameters(Weasel.Postgresql.IGroupedParameterBuilder parameterBuilder, Weasel.Postgresql.ICommandBuilder builder, ColorSwatches.Entities.Entities.OptionSetting document, Marten.Internal.IMartenSession session)
        {
            builder.Append("select public.mt_upsert_optionsetting(");
            var parameter0 = parameterBuilder.AppendParameter(document.StoreId);
            var parameter1 = parameterBuilder.AppendParameter(session.Serializer.ToJson(_document));
            parameter1.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            // .Net Class Type
            var parameter2 = parameterBuilder.AppendParameter(_document.GetType().FullName);
            parameter2.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            var parameter3 = parameterBuilder.AppendParameter(document.StoreId);
            setVersionParameter(parameterBuilder);
            builder.Append(')');
        }

    }

    // END: UpsertOptionSettingOperation1170858462
    
    
    // START: InsertOptionSettingOperation1170858462
    public class InsertOptionSettingOperation1170858462 : Marten.Internal.Operations.StorageOperation<ColorSwatches.Entities.Entities.OptionSetting, System.Guid>
    {
        private readonly ColorSwatches.Entities.Entities.OptionSetting _document;
        private readonly System.Guid _id;
        private readonly System.Collections.Generic.Dictionary<System.Guid, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public InsertOptionSettingOperation1170858462(ColorSwatches.Entities.Entities.OptionSetting document, System.Guid id, System.Collections.Generic.Dictionary<System.Guid, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }



        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            storeVersion();
        }


        public override System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            storeVersion();
            // Nothing
            return System.Threading.Tasks.Task.CompletedTask;
        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Insert;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Uuid;
        }


        public override void ConfigureParameters(Weasel.Postgresql.IGroupedParameterBuilder parameterBuilder, Weasel.Postgresql.ICommandBuilder builder, ColorSwatches.Entities.Entities.OptionSetting document, Marten.Internal.IMartenSession session)
        {
            builder.Append("select public.mt_insert_optionsetting(");
            var parameter0 = parameterBuilder.AppendParameter(document.StoreId);
            var parameter1 = parameterBuilder.AppendParameter(session.Serializer.ToJson(_document));
            parameter1.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            // .Net Class Type
            var parameter2 = parameterBuilder.AppendParameter(_document.GetType().FullName);
            parameter2.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            var parameter3 = parameterBuilder.AppendParameter(document.StoreId);
            setVersionParameter(parameterBuilder);
            builder.Append(')');
        }

    }

    // END: InsertOptionSettingOperation1170858462
    
    
    // START: UpdateOptionSettingOperation1170858462
    public class UpdateOptionSettingOperation1170858462 : Marten.Internal.Operations.StorageOperation<ColorSwatches.Entities.Entities.OptionSetting, System.Guid>
    {
        private readonly ColorSwatches.Entities.Entities.OptionSetting _document;
        private readonly System.Guid _id;
        private readonly System.Collections.Generic.Dictionary<System.Guid, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public UpdateOptionSettingOperation1170858462(ColorSwatches.Entities.Entities.OptionSetting document, System.Guid id, System.Collections.Generic.Dictionary<System.Guid, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }



        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            storeVersion();
            postprocessUpdate(reader, exceptions);
        }


        public override async System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            storeVersion();
            await postprocessUpdateAsync(reader, exceptions, token);
        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Update;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Uuid;
        }


        public override void ConfigureParameters(Weasel.Postgresql.IGroupedParameterBuilder parameterBuilder, Weasel.Postgresql.ICommandBuilder builder, ColorSwatches.Entities.Entities.OptionSetting document, Marten.Internal.IMartenSession session)
        {
            builder.Append("select public.mt_update_optionsetting(");
            var parameter0 = parameterBuilder.AppendParameter(document.StoreId);
            var parameter1 = parameterBuilder.AppendParameter(session.Serializer.ToJson(_document));
            parameter1.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            // .Net Class Type
            var parameter2 = parameterBuilder.AppendParameter(_document.GetType().FullName);
            parameter2.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            var parameter3 = parameterBuilder.AppendParameter(document.StoreId);
            setVersionParameter(parameterBuilder);
            builder.Append(')');
        }

    }

    // END: UpdateOptionSettingOperation1170858462
    
    
    // START: QueryOnlyOptionSettingSelector1170858462
    public class QueryOnlyOptionSettingSelector1170858462 : Marten.Internal.CodeGeneration.DocumentSelectorWithOnlySerializer, Marten.Linq.Selectors.ISelector<ColorSwatches.Entities.Entities.OptionSetting>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public QueryOnlyOptionSettingSelector1170858462(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public ColorSwatches.Entities.Entities.OptionSetting Resolve(System.Data.Common.DbDataReader reader)
        {

            ColorSwatches.Entities.Entities.OptionSetting document;
            document = _serializer.FromJson<ColorSwatches.Entities.Entities.OptionSetting>(reader, 0);
            return document;
        }


        public async System.Threading.Tasks.Task<ColorSwatches.Entities.Entities.OptionSetting> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {

            ColorSwatches.Entities.Entities.OptionSetting document;
            document = await _serializer.FromJsonAsync<ColorSwatches.Entities.Entities.OptionSetting>(reader, 0, token).ConfigureAwait(false);
            return document;
        }

    }

    // END: QueryOnlyOptionSettingSelector1170858462
    
    
    // START: LightweightOptionSettingSelector1170858462
    public class LightweightOptionSettingSelector1170858462 : Marten.Internal.CodeGeneration.DocumentSelectorWithVersions<ColorSwatches.Entities.Entities.OptionSetting, System.Guid>, Marten.Linq.Selectors.ISelector<ColorSwatches.Entities.Entities.OptionSetting>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public LightweightOptionSettingSelector1170858462(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public ColorSwatches.Entities.Entities.OptionSetting Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = reader.GetFieldValue<System.Guid>(0);

            ColorSwatches.Entities.Entities.OptionSetting document;
            document = _serializer.FromJson<ColorSwatches.Entities.Entities.OptionSetting>(reader, 1);
            _session.MarkAsDocumentLoaded(id, document);
            return document;
        }


        public async System.Threading.Tasks.Task<ColorSwatches.Entities.Entities.OptionSetting> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = await reader.GetFieldValueAsync<System.Guid>(0, token);

            ColorSwatches.Entities.Entities.OptionSetting document;
            document = await _serializer.FromJsonAsync<ColorSwatches.Entities.Entities.OptionSetting>(reader, 1, token).ConfigureAwait(false);
            _session.MarkAsDocumentLoaded(id, document);
            return document;
        }

    }

    // END: LightweightOptionSettingSelector1170858462
    
    
    // START: IdentityMapOptionSettingSelector1170858462
    public class IdentityMapOptionSettingSelector1170858462 : Marten.Internal.CodeGeneration.DocumentSelectorWithIdentityMap<ColorSwatches.Entities.Entities.OptionSetting, System.Guid>, Marten.Linq.Selectors.ISelector<ColorSwatches.Entities.Entities.OptionSetting>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public IdentityMapOptionSettingSelector1170858462(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public ColorSwatches.Entities.Entities.OptionSetting Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = reader.GetFieldValue<System.Guid>(0);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            ColorSwatches.Entities.Entities.OptionSetting document;
            document = _serializer.FromJson<ColorSwatches.Entities.Entities.OptionSetting>(reader, 1);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            return document;
        }


        public async System.Threading.Tasks.Task<ColorSwatches.Entities.Entities.OptionSetting> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = await reader.GetFieldValueAsync<System.Guid>(0, token);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            ColorSwatches.Entities.Entities.OptionSetting document;
            document = await _serializer.FromJsonAsync<ColorSwatches.Entities.Entities.OptionSetting>(reader, 1, token).ConfigureAwait(false);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            return document;
        }

    }

    // END: IdentityMapOptionSettingSelector1170858462
    
    
    // START: DirtyTrackingOptionSettingSelector1170858462
    public class DirtyTrackingOptionSettingSelector1170858462 : Marten.Internal.CodeGeneration.DocumentSelectorWithDirtyChecking<ColorSwatches.Entities.Entities.OptionSetting, System.Guid>, Marten.Linq.Selectors.ISelector<ColorSwatches.Entities.Entities.OptionSetting>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public DirtyTrackingOptionSettingSelector1170858462(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public ColorSwatches.Entities.Entities.OptionSetting Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = reader.GetFieldValue<System.Guid>(0);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            ColorSwatches.Entities.Entities.OptionSetting document;
            document = _serializer.FromJson<ColorSwatches.Entities.Entities.OptionSetting>(reader, 1);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            StoreTracker(_session, document);
            return document;
        }


        public async System.Threading.Tasks.Task<ColorSwatches.Entities.Entities.OptionSetting> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = await reader.GetFieldValueAsync<System.Guid>(0, token);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            ColorSwatches.Entities.Entities.OptionSetting document;
            document = await _serializer.FromJsonAsync<ColorSwatches.Entities.Entities.OptionSetting>(reader, 1, token).ConfigureAwait(false);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            StoreTracker(_session, document);
            return document;
        }

    }

    // END: DirtyTrackingOptionSettingSelector1170858462
    
    
    // START: QueryOnlyOptionSettingDocumentStorage1170858462
    public class QueryOnlyOptionSettingDocumentStorage1170858462 : Marten.Internal.Storage.QueryOnlyDocumentStorage<ColorSwatches.Entities.Entities.OptionSetting, System.Guid>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public QueryOnlyOptionSettingDocumentStorage1170858462(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override System.Guid AssignIdentity(ColorSwatches.Entities.Entities.OptionSetting document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.StoreId == Guid.Empty) _setter(document, Marten.Schema.Identity.CombGuidIdGeneration.NewGuid());
            return document.StoreId;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(ColorSwatches.Entities.Entities.OptionSetting document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpdateOptionSettingOperation1170858462
            (
                document, Identity(document),
                session.Versions.ForType<ColorSwatches.Entities.Entities.OptionSetting, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Insert(ColorSwatches.Entities.Entities.OptionSetting document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertOptionSettingOperation1170858462
            (
                document, Identity(document),
                session.Versions.ForType<ColorSwatches.Entities.Entities.OptionSetting, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(ColorSwatches.Entities.Entities.OptionSetting document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpsertOptionSettingOperation1170858462
            (
                document, Identity(document),
                session.Versions.ForType<ColorSwatches.Entities.Entities.OptionSetting, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(ColorSwatches.Entities.Entities.OptionSetting document, Marten.Internal.IMartenSession session, string tenant)
        {
            throw new System.NotSupportedException();
        }


        public override System.Guid Identity(ColorSwatches.Entities.Entities.OptionSetting document)
        {
            return document.StoreId;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.QueryOnlyOptionSettingSelector1170858462(session, _document);
        }


        public override object RawIdentityValue(System.Guid id)
        {
            return id;
        }


        public override Npgsql.NpgsqlParameter BuildManyIdParameter(System.Guid[] ids)
        {
            return base.BuildManyIdParameter(ids);
        }

    }

    // END: QueryOnlyOptionSettingDocumentStorage1170858462
    
    
    // START: LightweightOptionSettingDocumentStorage1170858462
    public class LightweightOptionSettingDocumentStorage1170858462 : Marten.Internal.Storage.LightweightDocumentStorage<ColorSwatches.Entities.Entities.OptionSetting, System.Guid>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public LightweightOptionSettingDocumentStorage1170858462(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override System.Guid AssignIdentity(ColorSwatches.Entities.Entities.OptionSetting document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.StoreId == Guid.Empty) _setter(document, Marten.Schema.Identity.CombGuidIdGeneration.NewGuid());
            return document.StoreId;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(ColorSwatches.Entities.Entities.OptionSetting document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpdateOptionSettingOperation1170858462
            (
                document, Identity(document),
                session.Versions.ForType<ColorSwatches.Entities.Entities.OptionSetting, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Insert(ColorSwatches.Entities.Entities.OptionSetting document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertOptionSettingOperation1170858462
            (
                document, Identity(document),
                session.Versions.ForType<ColorSwatches.Entities.Entities.OptionSetting, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(ColorSwatches.Entities.Entities.OptionSetting document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpsertOptionSettingOperation1170858462
            (
                document, Identity(document),
                session.Versions.ForType<ColorSwatches.Entities.Entities.OptionSetting, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(ColorSwatches.Entities.Entities.OptionSetting document, Marten.Internal.IMartenSession session, string tenant)
        {
            throw new System.NotSupportedException();
        }


        public override System.Guid Identity(ColorSwatches.Entities.Entities.OptionSetting document)
        {
            return document.StoreId;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.LightweightOptionSettingSelector1170858462(session, _document);
        }


        public override object RawIdentityValue(System.Guid id)
        {
            return id;
        }


        public override Npgsql.NpgsqlParameter BuildManyIdParameter(System.Guid[] ids)
        {
            return base.BuildManyIdParameter(ids);
        }

    }

    // END: LightweightOptionSettingDocumentStorage1170858462
    
    
    // START: IdentityMapOptionSettingDocumentStorage1170858462
    public class IdentityMapOptionSettingDocumentStorage1170858462 : Marten.Internal.Storage.IdentityMapDocumentStorage<ColorSwatches.Entities.Entities.OptionSetting, System.Guid>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public IdentityMapOptionSettingDocumentStorage1170858462(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override System.Guid AssignIdentity(ColorSwatches.Entities.Entities.OptionSetting document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.StoreId == Guid.Empty) _setter(document, Marten.Schema.Identity.CombGuidIdGeneration.NewGuid());
            return document.StoreId;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(ColorSwatches.Entities.Entities.OptionSetting document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpdateOptionSettingOperation1170858462
            (
                document, Identity(document),
                session.Versions.ForType<ColorSwatches.Entities.Entities.OptionSetting, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Insert(ColorSwatches.Entities.Entities.OptionSetting document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertOptionSettingOperation1170858462
            (
                document, Identity(document),
                session.Versions.ForType<ColorSwatches.Entities.Entities.OptionSetting, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(ColorSwatches.Entities.Entities.OptionSetting document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpsertOptionSettingOperation1170858462
            (
                document, Identity(document),
                session.Versions.ForType<ColorSwatches.Entities.Entities.OptionSetting, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(ColorSwatches.Entities.Entities.OptionSetting document, Marten.Internal.IMartenSession session, string tenant)
        {
            throw new System.NotSupportedException();
        }


        public override System.Guid Identity(ColorSwatches.Entities.Entities.OptionSetting document)
        {
            return document.StoreId;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.IdentityMapOptionSettingSelector1170858462(session, _document);
        }


        public override object RawIdentityValue(System.Guid id)
        {
            return id;
        }


        public override Npgsql.NpgsqlParameter BuildManyIdParameter(System.Guid[] ids)
        {
            return base.BuildManyIdParameter(ids);
        }

    }

    // END: IdentityMapOptionSettingDocumentStorage1170858462
    
    
    // START: DirtyTrackingOptionSettingDocumentStorage1170858462
    public class DirtyTrackingOptionSettingDocumentStorage1170858462 : Marten.Internal.Storage.DirtyCheckedDocumentStorage<ColorSwatches.Entities.Entities.OptionSetting, System.Guid>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public DirtyTrackingOptionSettingDocumentStorage1170858462(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override System.Guid AssignIdentity(ColorSwatches.Entities.Entities.OptionSetting document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.StoreId == Guid.Empty) _setter(document, Marten.Schema.Identity.CombGuidIdGeneration.NewGuid());
            return document.StoreId;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(ColorSwatches.Entities.Entities.OptionSetting document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpdateOptionSettingOperation1170858462
            (
                document, Identity(document),
                session.Versions.ForType<ColorSwatches.Entities.Entities.OptionSetting, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Insert(ColorSwatches.Entities.Entities.OptionSetting document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertOptionSettingOperation1170858462
            (
                document, Identity(document),
                session.Versions.ForType<ColorSwatches.Entities.Entities.OptionSetting, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(ColorSwatches.Entities.Entities.OptionSetting document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpsertOptionSettingOperation1170858462
            (
                document, Identity(document),
                session.Versions.ForType<ColorSwatches.Entities.Entities.OptionSetting, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(ColorSwatches.Entities.Entities.OptionSetting document, Marten.Internal.IMartenSession session, string tenant)
        {
            throw new System.NotSupportedException();
        }


        public override System.Guid Identity(ColorSwatches.Entities.Entities.OptionSetting document)
        {
            return document.StoreId;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.DirtyTrackingOptionSettingSelector1170858462(session, _document);
        }


        public override object RawIdentityValue(System.Guid id)
        {
            return id;
        }


        public override Npgsql.NpgsqlParameter BuildManyIdParameter(System.Guid[] ids)
        {
            return base.BuildManyIdParameter(ids);
        }

    }

    // END: DirtyTrackingOptionSettingDocumentStorage1170858462
    
    
    // START: OptionSettingBulkLoader1170858462
    public class OptionSettingBulkLoader1170858462 : Marten.Internal.CodeGeneration.BulkLoader<ColorSwatches.Entities.Entities.OptionSetting, System.Guid>
    {
        private readonly Marten.Internal.Storage.IDocumentStorage<ColorSwatches.Entities.Entities.OptionSetting, System.Guid> _storage;

        public OptionSettingBulkLoader1170858462(Marten.Internal.Storage.IDocumentStorage<ColorSwatches.Entities.Entities.OptionSetting, System.Guid> storage) : base(storage)
        {
            _storage = storage;
        }


        public const string MAIN_LOADER_SQL = "COPY public.mt_doc_optionsetting(\"store__id\", \"mt_dotnet_type\", \"id\", \"mt_version\", \"data\") FROM STDIN BINARY";

        public const string TEMP_LOADER_SQL = "COPY mt_doc_optionsetting_temp(\"store__id\", \"mt_dotnet_type\", \"id\", \"mt_version\", \"data\") FROM STDIN BINARY";

        public const string COPY_NEW_DOCUMENTS_SQL = "insert into public.mt_doc_optionsetting (\"id\", \"data\", \"mt_version\", \"mt_dotnet_type\", \"store__id\", mt_last_modified) (select mt_doc_optionsetting_temp.\"id\", mt_doc_optionsetting_temp.\"data\", mt_doc_optionsetting_temp.\"mt_version\", mt_doc_optionsetting_temp.\"mt_dotnet_type\", mt_doc_optionsetting_temp.\"store__id\", transaction_timestamp() from mt_doc_optionsetting_temp left join public.mt_doc_optionsetting on mt_doc_optionsetting_temp.id = public.mt_doc_optionsetting.id where public.mt_doc_optionsetting.id is null)";

        public const string OVERWRITE_SQL = "update public.mt_doc_optionsetting target SET data = source.data, mt_version = source.mt_version, mt_dotnet_type = source.mt_dotnet_type, store__id = source.store__id, mt_last_modified = transaction_timestamp() FROM mt_doc_optionsetting_temp source WHERE source.id = target.id";

        public const string CREATE_TEMP_TABLE_FOR_COPYING_SQL = "create temporary table mt_doc_optionsetting_temp (like public.mt_doc_optionsetting including defaults)";


        public override string CreateTempTableForCopying()
        {
            return CREATE_TEMP_TABLE_FOR_COPYING_SQL;
        }


        public override string CopyNewDocumentsFromTempTable()
        {
            return COPY_NEW_DOCUMENTS_SQL;
        }


        public override string OverwriteDuplicatesFromTempTable()
        {
            return OVERWRITE_SQL;
        }


        public override void LoadRow(Npgsql.NpgsqlBinaryImporter writer, ColorSwatches.Entities.Entities.OptionSetting document, Marten.Storage.Tenant tenant, Marten.ISerializer serializer)
        {
            writer.Write(document.StoreId, NpgsqlTypes.NpgsqlDbType.Uuid);
            writer.Write(document.GetType().FullName, NpgsqlTypes.NpgsqlDbType.Varchar);
            writer.Write(document.StoreId, NpgsqlTypes.NpgsqlDbType.Uuid);
            writer.Write(Marten.Schema.Identity.CombGuidIdGeneration.NewGuid(), NpgsqlTypes.NpgsqlDbType.Uuid);
            writer.Write(serializer.ToJson(document), NpgsqlTypes.NpgsqlDbType.Jsonb);
        }


        public override async System.Threading.Tasks.Task LoadRowAsync(Npgsql.NpgsqlBinaryImporter writer, ColorSwatches.Entities.Entities.OptionSetting document, Marten.Storage.Tenant tenant, Marten.ISerializer serializer, System.Threading.CancellationToken cancellation)
        {
            await writer.WriteAsync(document.StoreId, NpgsqlTypes.NpgsqlDbType.Uuid, cancellation);
            await writer.WriteAsync(document.GetType().FullName, NpgsqlTypes.NpgsqlDbType.Varchar, cancellation);
            await writer.WriteAsync(document.StoreId, NpgsqlTypes.NpgsqlDbType.Uuid, cancellation);
            await writer.WriteAsync(Marten.Schema.Identity.CombGuidIdGeneration.NewGuid(), NpgsqlTypes.NpgsqlDbType.Uuid, cancellation);
            await writer.WriteAsync(serializer.ToJson(document), NpgsqlTypes.NpgsqlDbType.Jsonb, cancellation);
        }


        public override string MainLoaderSql()
        {
            return MAIN_LOADER_SQL;
        }


        public override string TempLoaderSql()
        {
            return TEMP_LOADER_SQL;
        }

    }

    // END: OptionSettingBulkLoader1170858462
    
    
    // START: OptionSettingProvider1170858462
    public class OptionSettingProvider1170858462 : Marten.Internal.Storage.DocumentProvider<ColorSwatches.Entities.Entities.OptionSetting>
    {
        private readonly Marten.Schema.DocumentMapping _mapping;

        public OptionSettingProvider1170858462(Marten.Schema.DocumentMapping mapping) : base(new OptionSettingBulkLoader1170858462(new QueryOnlyOptionSettingDocumentStorage1170858462(mapping)), new QueryOnlyOptionSettingDocumentStorage1170858462(mapping), new LightweightOptionSettingDocumentStorage1170858462(mapping), new IdentityMapOptionSettingDocumentStorage1170858462(mapping), new DirtyTrackingOptionSettingDocumentStorage1170858462(mapping))
        {
            _mapping = mapping;
        }


    }

    // END: OptionSettingProvider1170858462
    
    
}

